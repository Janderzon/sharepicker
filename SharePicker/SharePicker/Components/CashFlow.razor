@using SharePicker.Models

<MudDataGrid 
    Items="@_rows" 
    Dense="true" 
    Hover="true" 
    Bordered="true"
    Groupable="true"
    GroupExpanded="true">
    <Columns>
        <PropertyColumn Property="x => x.Name" StickyLeft="true" Sortable="false" Title="" />
        @foreach (var cashFlowStatement in CashFlowStatements.Reverse())
        {
            <PropertyColumn
                Property="x => x.ValueFactory(cashFlowStatement)" 
                Sortable="false"
                Title="@cashFlowStatement.Date.ToString("yyyy")" />
        }
        <PropertyColumn Property="x => x.Group" Grouping Hidden="true">
            <GroupTemplate>
                <span style="font-weight:bold">@GetGroupName(context.Grouping.Key)</span>
            </GroupTemplate>
        </PropertyColumn>
    </Columns>
</MudDataGrid>

@code {
    private record Row(string Name, Func<CashFlowStatement, decimal> ValueFactory, Group Group);
    private List<Row> _rows = new()
    {
        // new ("Operating Profit", cashFlowStatement => cashFlowStatement.OperationsCashFlow.OperatingProfit, Group.OperatingCashFlow),
        new ("Depreciation & Amortisation", cashFlowStatement => cashFlowStatement.OperationsCashFlow.DepreciationAndAmortisation, Group.OperatingCashFlow),
        // new ("Profit On Disposals", cashFlowStatement => cashFlowStatement.OperationsCashFlow.ProfitOnDisposals, Group.OperatingCashFlow),
        new ("Change In Stock", cashFlowStatement => cashFlowStatement.OperationsCashFlow.ChangeInStock, Group.OperatingCashFlow),
        new ("Change In Debtors", cashFlowStatement => cashFlowStatement.OperationsCashFlow.ChangeInDebtors, Group.OperatingCashFlow),
        // new ("Change In Creditors", cashFlowStatement => cashFlowStatement.OperationsCashFlow.ChangeInCreditors, Group.OperatingCashFlow),
        // new ("Change In Provisions", cashFlowStatement => cashFlowStatement.OperationsCashFlow.ChangeInProvisions, Group.OperatingCashFlow),
        new ("Change In Working Capital", cashFlowStatement => cashFlowStatement.OperationsCashFlow.ChangeInWorkingCapital, Group.OperatingCashFlow),
        // new ("Other (Operating)", cashFlowStatement => cashFlowStatement.OperationsCashFlow.Other, Group.OperatingCashFlow),
        // new ("Operating Cash Flow", cashFlowStatement => cashFlowStatement.OperationsCashFlow.OperatingCashFlow, Group.OperatingCashFlow),
        // new ("Tax Paid", cashFlowStatement => cashFlowStatement.OperationsCashFlow.TaxPaid, Group.OperatingCashFlow),
        new ("Net Cash From Operations", cashFlowStatement => cashFlowStatement.OperationsCashFlow.NetCashFromOperations, Group.OperatingCashFlow),
        new ("Capital Expenditure", cashFlowStatement => cashFlowStatement.InvestingCashFlow.CapitalExpenditure, Group.InvestingCashFlow),
        // new ("Sale Of Fixed Assets", cashFlowStatement => cashFlowStatement.InvestingCashFlow.SaleOfFixedAssets, Group.InvestingCashFlow),
        // new ("Acquisitions", cashFlowStatement => cashFlowStatement.InvestingCashFlow.Aquisitions, Group.InvestingCashFlow),
        // new ("Sale Of Businesses", cashFlowStatement => cashFlowStatement.InvestingCashFlow.SaleOfBusinesses, Group.InvestingCashFlow),
        // new ("Interest Received", cashFlowStatement => cashFlowStatement.InvestingCashFlow.InterestReceived, Group.InvestingCashFlow),
        // new ("Other Investments Received", cashFlowStatement => cashFlowStatement.InvestingCashFlow.OtherInvestmentsReceived, Group.InvestingCashFlow),
        // new ("Dividends From Joint Ventures", cashFlowStatement => cashFlowStatement.InvestingCashFlow.DividendsFromJointVentures, Group.InvestingCashFlow),
        // new ("Other (Investing)", cashFlowStatement => cashFlowStatement.InvestingCashFlow.Other, Group.InvestingCashFlow),
        new ("Net Cash From Investing", cashFlowStatement => cashFlowStatement.InvestingCashFlow.NetCashFromInvesting, Group.InvestingCashFlow),
        new ("New Share Issues", cashFlowStatement => cashFlowStatement.FinancingCashFlow.NewShareIssues, Group.FinancingCashFlow),
        new ("Share Buyback", cashFlowStatement => cashFlowStatement.FinancingCashFlow.ShareBuyBack, Group.FinancingCashFlow),
        // new ("New Borrowing", cashFlowStatement => cashFlowStatement.FinancingCashFlow.NewBorrowing, Group.FinancingCashFlow),
        new ("Repayment Of Borrowing", cashFlowStatement => cashFlowStatement.FinancingCashFlow.RepaymentOfBorrowing, Group.FinancingCashFlow),
        new ("Dividends Paid", cashFlowStatement => cashFlowStatement.FinancingCashFlow.DividendsPaid, Group.FinancingCashFlow),
        // new ("Interest Paid", cashFlowStatement => cashFlowStatement.FinancingCashFlow.InterestPaid, Group.FinancingCashFlow),
        new ("Other (Financing)", cashFlowStatement => cashFlowStatement.FinancingCashFlow.OtherFinancingActivities, Group.FinancingCashFlow),
        new ("Net Cash From Financing", cashFlowStatement => cashFlowStatement.FinancingCashFlow.NetCashFromFinancing, Group.FinancingCashFlow),
        new ("Net Change In Cash", cashFlowStatement => cashFlowStatement.NetChangeInCash, Group.Summary)
    };

    [Parameter]
    [EditorRequired]
    public IEnumerable<CashFlowStatement> CashFlowStatements { get; set; } = new List<CashFlowStatement>();

    private enum Group
    {
        OperatingCashFlow,
        InvestingCashFlow,
        FinancingCashFlow,
        Summary
    }

    private string GetGroupName(object group) => group switch
    {
        Group.OperatingCashFlow => "Operating",
        Group.InvestingCashFlow => "Investing",
        Group.FinancingCashFlow => "Financing",
        Group.Summary => "Summary",
        _ => throw new Exception($"Unsupported type: {group.GetType()}")
    };
}
