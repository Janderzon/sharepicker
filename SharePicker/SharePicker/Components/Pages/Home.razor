@page "/"
@using SharePicker.Models
@using SharePicker.Services
@inject FinancialStatementRepository FinancialStatementRepository

<MudStack>
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Select A Company To Analyse</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <CompanySelector OnCompanySelect="OnSelectedCompanyChange" />
        </MudCardContent>
    </MudCard>

    @if(_incomeStatements != null)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Income</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <Income IncomeStatements="@_incomeStatements" />
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Cash Flow</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <CashFlow CashFlowStatements="@_cashFlowStatements" />
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">EBIT Chart</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>
                    EBIT (earings before interest and tax) should be increasing year on year. 
                    Revenue should also be increasing year on year as it indicates that the EBIT growth is due to an increase in sales rather than cutting costs.
                    Ideally we'd view data for 10 years as it will include different parts of the economic cycle.
                    One-off gains/costs are not excluded and may account for any spikes/dips in the below chart.
                </MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@([GetEbitSeries(), GetRevenueSeries()])" XAxisLabels="GetXAxisLabels()" />
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Profit Margin</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>
                    Profit margin is calculated as 100 * EBIT / Revenue. 
                    The profit margin should be consistently at least 10-15%.
                    Companies with higher profit margins are better placed withstand tempory periods of difficulty that may depress profits.
                </MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@([GetProfitMarginSeries(), GetProfitMarginSeries2()])" XAxisLabels="GetXAxisLabels()" />
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">ROCE</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>
                    ROCE (return on capital employed) is calculated as 100 * EBIT / Capital Employed, where Capital Employed = Total Assets - Current Liabilities + Short-Term Borrowings.
                    The profit margin should be consistently at least 10-15%.
                    Companies with higher profit margins are better placed withstand tempory periods of difficulty that may depress profits.
                </MudText>
                <MudChart ChartType="ChartType.Bar" ChartSeries="@([GetRoceSeries(), GetRoceSeries2()])" XAxisLabels="GetXAxisLabels()" />
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@code {
    private List<IncomeStatement>? _incomeStatements;
    private IncomeStatement? _selectedIncomeStatement;
    private List<Ratios>? _ratios;
    private List<BalanceSheetStatement>? _balanceSheetStatements;
    private List<CashFlowStatement>? _cashFlowStatements;

    private async Task OnSelectedCompanyChange(Company company)
    {
        _incomeStatements = await FinancialStatementRepository.GetIncomeStatementsAsync(company, CancellationToken.None);
        _selectedIncomeStatement = _incomeStatements.First();
        _ratios = await FinancialStatementRepository.GetRatiosAsync(company, CancellationToken.None);
        _balanceSheetStatements = await FinancialStatementRepository.GetBalanceSheetStatementsAsync(company, CancellationToken.None);
        _cashFlowStatements = await FinancialStatementRepository.GetCashFlowStatementsAsync(company, CancellationToken.None);
    }

    private string GetDateString(IncomeStatement? incomeStatement) =>
        incomeStatement?.DateTimeOffset.ToString("yyyy-MM-dd") ?? string.Empty;

    private ChartSeries GetEbitSeries() => new ChartSeries
    {
        Name = "EBIT",
        Data = _incomeStatements?
            .Select(incomeStatement => (double)incomeStatement.Ebit)
            .Reverse()
            .ToArray() ?? []
    };

    private ChartSeries GetRevenueSeries() => new ChartSeries
    {
        Name = "Revenue",
        Data = _incomeStatements?
            .Select(incomeStatement => (double)incomeStatement.Revenue)
            .Reverse()
            .ToArray() ?? []
    };

    private ChartSeries GetProfitMarginSeries() => new ChartSeries
    {
        Name = "Profit Margin (%)",
        Data = _incomeStatements?
            .Select(incomeStatement => (double)(100m * incomeStatement.Ebit / incomeStatement.Revenue))
            .Reverse()
            .ToArray() ?? []
    };

    private ChartSeries GetProfitMarginSeries2() => new ChartSeries
    {
        Name = "Profit Margin 2 (%)",
        Data = _ratios?
            .Select(ratios => (double)(100m * ratios.ProfitMargin))
            .Reverse()
            .ToArray() ?? []
    };

    private ChartSeries GetRoceSeries() => new ChartSeries
    {
        Name = "ROCE (%)",
        Data = _balanceSheetStatements?
            .Zip(_incomeStatements)
            .Select(tp => (double)(100m * tp.Second.Ebit
                / (tp.First.TotalAssets - tp.First.CurrentLiabilities + tp.First.ShortTermDebt)))
            .Reverse()
            .ToArray() ?? []
    };

    private ChartSeries GetRoceSeries2() => new ChartSeries
    {
        Name = "ROCE 2 (%)",
        Data = _ratios?
            .Select(ratios => (double)(100m * ratios.Roce))
            .Reverse()
            .ToArray() ?? []
    };

    private string[] GetXAxisLabels() => _incomeStatements?
        .Select(incomeStatement => GetDateString(incomeStatement))
        .Reverse()
        .ToArray() ?? [];
}
