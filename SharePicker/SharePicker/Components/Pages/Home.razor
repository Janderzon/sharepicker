@page "/"
@using SharePicker.Models
@using SharePicker.Services
@inject FinancialStatementRepository FinancialStatementRepository

<MudStack>
    <MudDataGrid
        T="Company"
        Items="@_companies"
        QuickFilter="@GlobalSearch"
        Virtualize="true"
        FixedHeader="true" 
        Filterable="true"
        RowClick="OnRowClick"
        Height="350px">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Companies</MudText>
            <MudSpacer />
            <MudTextField 
                @bind-Value="_searchString" 
                Placeholder="Search" 
                Adornment="Adornment.Start" 
                Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" 
                Class="mt-0" />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="company => company.Symbol" Title="Symbol" />
            <PropertyColumn Property="company => company.Name" Title="Name" />
            <PropertyColumn Property="company => company.Exchange.Name" Title="Exchange" />
            <PropertyColumn Property="company => company.Exchange.ShortName" Title="Exchange Short Name" />
        </Columns>
    </MudDataGrid>

    @if(_incomeStatements != null)
    {
        <MudList T="string">
            <MudListItem>EBIT:<MudSpacer />@_incomeStatements.First().Ebit</MudListItem>
        </MudList>
    }
</MudStack>

@code {
    private IEnumerable<Company>? _companies;
    private string? _searchString;
    private IEnumerable<IncomeStatement>? _incomeStatements;

    protected override async Task OnInitializedAsync()
    {
        _companies = await FinancialStatementRepository.GetCompaniesAsync(CancellationToken.None);
    }

    private bool GlobalSearch(Company company) 
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (company.Symbol.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (company.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (company.Exchange.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (company.Exchange.ShortName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task OnRowClick(DataGridRowClickEventArgs<Company> args)
    {
        _incomeStatements = await FinancialStatementRepository.GetIncomeStatementsAsync(args.Item, CancellationToken.None);
    }
}
