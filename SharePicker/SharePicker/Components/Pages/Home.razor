@page "/"
@using SharePicker.Models
@using SharePicker.Services
@inject FinancialStatementRepository FinancialStatementRepository

<MudStack>
    <MudDataGrid
        T="Company"
        Items="@_companies"
        QuickFilter="@GlobalSearch"
        Virtualize="true"
        FixedHeader="true" 
        Filterable="true"
        SelectedItemChanged="OnSelectedCompanyChange"
        Hover="true"
        RowStyleFunc="SetRowStyle"
        Height="350px">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Companies</MudText>
            <MudSpacer />
            <MudTextField 
                @bind-Value="_searchString" 
                Placeholder="Search" 
                Adornment="Adornment.Start" 
                Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search"
                IconSize="Size.Medium" 
                Class="mt-0" />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="company => company.Symbol" Title="Symbol" />
            <PropertyColumn Property="company => company.Name" Title="Name" />
            <PropertyColumn Property="company => company.Exchange.Name" Title="Exchange" />
            <PropertyColumn Property="company => company.Exchange.ShortName" Title="Exchange Short Name" />
        </Columns>
    </MudDataGrid>

    @if(_incomeStatements != null)
    {
        <MudSelect @bind-Value="_selectedIncomeStatement" ToStringFunc="GetDateString">
            @foreach (var incomeStatement in _incomeStatements)
            {
                <MudSelectItem Value="@incomeStatement" />
            }
        </MudSelect>
        <MudSimpleTable Hover="true">
            <tbody>
                <tr>
                    <td>EBIT:</td>
                    <td>@_selectedIncomeStatement?.Ebit</td>
                </tr>
                <tr>
                    <td>Revenue:</td>
                    <td>@_selectedIncomeStatement?.Revenue</td>
                </tr>
            </tbody>
        </MudSimpleTable>
        <MudChart ChartType="ChartType.Bar" ChartSeries="@([GetEbitSeries(), GetRevenueSeries()])" XAxisLabels="GetXAxisLabels()" />
    }
</MudStack>

@code {
    private IEnumerable<Company>? _companies;
    private Company? _selectedCompany;
    private string? _searchString;
    private IEnumerable<IncomeStatement>? _incomeStatements;
    private IncomeStatement? _selectedIncomeStatement;

    protected override async Task OnInitializedAsync() =>
        _companies = await FinancialStatementRepository.GetCompaniesAsync(CancellationToken.None);

    private bool GlobalSearch(Company company) 
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (company.Symbol.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (company.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (company.Exchange.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (company.Exchange.ShortName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task OnSelectedCompanyChange(Company company)
    {
        _selectedCompany = company;
        _incomeStatements = await FinancialStatementRepository.GetIncomeStatementsAsync(company, CancellationToken.None);
        _selectedIncomeStatement = _incomeStatements.First();
    }

    private string SetRowStyle(Company company, int _) =>
        company == _selectedCompany ? "background: #D3D3D3" : "";

    private string GetDateString(IncomeStatement? incomeStatement) =>
        incomeStatement?.DateTimeOffset.ToString("yyyy-MM-dd") ?? string.Empty;

    private ChartSeries GetEbitSeries() => new ChartSeries
    {
        Name = "EBIT",
        Data = _incomeStatements?
            .Select(incomeStatement => (double)incomeStatement.Ebit)
            .Reverse()
            .ToArray() ?? []
    };

    private ChartSeries GetRevenueSeries() => new ChartSeries
    {
        Name = "Revenue",
        Data = _incomeStatements?
            .Select(incomeStatement => (double)incomeStatement.Revenue)
            .Reverse()
            .ToArray() ?? []
    };

    private string[] GetXAxisLabels() => _incomeStatements?
        .Select(incomeStatement => GetDateString(incomeStatement))
        .Reverse()
        .ToArray() ?? [];
}
