@page "/CompanyFilter"
@using Microsoft.AspNetCore.Authorization
@using SharePicker.Models
@using SharePicker.Services
@inject CompanyRepository CompanyRepository
@implements IAsyncDisposable

@attribute [Authorize]

<MudStack>
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h2">Filter Builder</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudSelect T="Exchange"
                       Label="Exchanges"
                       MultiSelection="true"
                       SelectAll="true"
                       MultiSelectionTextFunc="GetExchangeSelectionText"
                       @bind-SelectedValues="_selectedExchanges">
                @foreach (var exchange in _exchanges)
                {
                    <MudSelectItem Value="@exchange">@exchange.Symbol</MudSelectItem>
                }
            </MudSelect>
            <MudNumericField @bind-Value="_minProfitMargin" Label="Min Profit Margin (Suggested min: 10%)" />
            <MudNumericField @bind-Value="_maxProfitMarginOutliers" Label="Max Profit Margin Outliers" />
            <MudNumericField @bind-Value="_minRoce" Label="Min ROCE (Suggested min: 15%)" />
            <MudNumericField @bind-Value="_maxRoceOutliers" Label="Max ROCE Outliers" />
            <MudSwitch @bind-Value="_increasingProfits" Label="Year-On-Year Increasing Profits" Color="Color.Info" />
            <MudNumericField @bind-Value="_maxIncreasingProfitsOutliers" Label="Max ROCE Outliers" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="_processing" Variant="Variant.Filled" Color="Color.Primary" OnClick="GetResults">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Filter</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
    @if (_results != null)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Results</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudDataGrid Items="_results" Virtualize="true" FixedHeader="true" Dense="true" Height="350px">
                    <ToolBarContent>
                        <MudText>Results Count: @_results.Count</MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="company => company.Symbol" Title="Symbol" />
                        <PropertyColumn Property="company => company.Name" Title="Name"/>
                        <PropertyColumn Property="company => company.Exchange.Symbol" Title="Exchange Symbol" />
                    </Columns>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@code {
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private List<Exchange> _exchanges = [];
    private IEnumerable<Exchange> _selectedExchanges = new List<Exchange>();
    private List<Company>? _results;
    private bool _processing;
    private decimal? _minProfitMargin;
    private int? _maxProfitMarginOutliers;
    private decimal? _minRoce;
    private int? _maxRoceOutliers;
    private bool _increasingProfits;
    private int? _maxIncreasingProfitsOutliers;

    protected override async Task OnInitializedAsync()
    {
        _exchanges = await CompanyRepository.GetExchangeAsync(_cancellationTokenSource.Token);
        _selectedExchanges = _exchanges;
    }

    private static string GetExchangeSelectionText(List<string> selectedValues) => selectedValues.Count == 0 
        ? "No exchanges selected"
        : $"{selectedValues.Count} exchange{(selectedValues.Count > 1 ? "s" : "")} selected";

    private async Task GetResults()
    {
        _processing = true;
        _results = null;

        var companyFilterBuilder = new CompanyFilterBuilder();

        companyFilterBuilder.WithExchanges(_selectedExchanges);
        if (_minProfitMargin.HasValue)
            companyFilterBuilder.WithMinProfitMargin(_minProfitMargin.Value, _maxProfitMarginOutliers ?? 0);
        if (_minRoce.HasValue)
            companyFilterBuilder.WithMinReturnOnCapitalEmployed(_minRoce.Value, _maxRoceOutliers ?? 0);
        if (_increasingProfits)
            companyFilterBuilder.WithIncreasingProfits(_maxIncreasingProfitsOutliers ?? 0);

        _results = await CompanyRepository.GetFilteredCompaniesAsync(
            companyFilterBuilder.Build(),
            _cancellationTokenSource.Token);

        _processing = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
    }
}
