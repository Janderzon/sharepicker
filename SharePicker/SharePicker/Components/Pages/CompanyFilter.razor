@page "/CompanyFilter"

@using Microsoft.AspNetCore.Authorization
@using SharePicker.Models
@using SharePicker.Services

@* @attribute [Authorize] *@
@inject FinancialStatementRepository FinancialStatementRepository

<MudStack>
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h2">Filter Builder</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudSelect T="string"
                       Label="Exchanges"
                       MultiSelection="true"
                       SelectAll="true"
                       MultiSelectionTextFunc="GetExchangeSelectionText"
                       @bind-SelectedValues=_selectedExchanges>
                @foreach (var exchange in _exchanges)
                {
                    <MudSelectItem Value="@exchange">@exchange</MudSelectItem>
                }
            </MudSelect>
            <MudNumericField @bind-Value="_minProfitMargin" Label="Min Profit Margin" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="_processing" Variant="Variant.Filled" Color="Color.Primary" OnClick="GetResults">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Filter</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
    @if (_results != null)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Results</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudDataGrid Items="_results" Virtualize="true" FixedHeader="true" Height="350px">
                    <ToolBarContent>
                        <MudText>Results Count: @_results.Count()</MudText>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="company => company.Symbol" Title="Symbol" />
                        <PropertyColumn Property="company => company.Name" Title="Name"/>
                        <PropertyColumn Property="company => company.Exchange" Title="Exchange" />
                    </Columns>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@code {
    private IEnumerable<string> _exchanges = new List<string>();
    private IEnumerable<string> _selectedExchanges = new List<string>();
    private List<Company>? _results;
    private bool _processing;
    private double? _minProfitMargin;

    protected override async Task OnInitializedAsync()
    {
        var exchanges = await FinancialStatementRepository.GetExchanges();

        _exchanges = exchanges.OrderBy(exchange => exchange.ShortName);
    }

    private string GetExchangeSelectionText(List<string> selectedValues) => selectedValues.Count == 0 
        ? "No exchanges selected"
        : $"{selectedValues.Count} exchange{(selectedValues.Count > 1 ? "s" : "")} selected";

    private async Task GetResults()
    {
        _processing = true;

        var companies = await FinancialStatementRepository.GetCompaniesAsync(CancellationToken.None);
        var selectedExchanges = _selectedExchanges.ToHashSet();
        companies = companies
            .Where(company => selectedExchanges.Contains(company.Exchange))
            .ToHashSet();

        _results = companies.ToList();

        // if (_minProfitMargin != null)
        // {
        //     var incomeStatementsPerCompany = new Dictionary<Company, List<IncomeStatement>>();
        //     foreach (var company in companies)
        //     {
        //         incomeStatementsPerCompany[company] = await FinancialStatementRepository
        //             .GetIncomeStatementsAsync(company, CancellationToken.None);
        //     }
        // }

        _processing = false;
    }
}
