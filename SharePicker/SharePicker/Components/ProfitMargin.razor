@using ApexCharts
@using SharePicker.Models
@implements IAsyncDisposable

@if (_profitMarginSeries != null)
{
    <ApexChart Options="_chartOptions">
        <ApexPointSeries 
            Items="_profitMarginSeries"
            Name="Profit Margin"
            XValue="@(x => x.Label)"
            YValue="@(x => x.Value)"
            SeriesType="SeriesType.Bar" />
    </ApexChart>
} 
else
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Style="padding-top: 61.8%" />
}

@code {
    private CancellationTokenSource _cancellationTokenSource = new();
    private List<LabeledValue>? _profitMarginSeries;
    private ApexChartOptions<LabeledValue> _chartOptions = new()
    {
        Chart = new()
        {
            Toolbar = new() { Show = false }
        },
        Theme = new() { Mode = Mode.Dark },
        Yaxis = new()
        {
            new()
            {
                Title = new(){ Text = "Ratio" }
            }
        }
    };

    [Parameter]
    [EditorRequired]
    public Func<CancellationToken, Task<List<LabeledValue>>> ProfitMarginSeriesFactory { get; set; } =
        _ => Task.FromResult(new List<LabeledValue>());

    protected override async Task OnParametersSetAsync()
    {
        _profitMarginSeries = null;

        _profitMarginSeries = await ProfitMarginSeriesFactory.Invoke(_cancellationTokenSource.Token);

        await base.OnParametersSetAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
    }
}
