@using SharePicker.Models
@implements IAsyncDisposable

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

    .selected > td {
        color: white !important;
    }

    .selected > td .mud-input {
        color: white !important;
    }
</style>

<MudDataGrid 
    @ref=_dataGrid
    T="Company"
    Items="_companies"
    QuickFilter="@GlobalSearch"
    Virtualize="true"
    FixedHeader="true"
    Filterable="true"
    SelectedItemChanged="OnCompanySelect"
    Hover="true"
    RowClassFunc="SelectedRowClassFunc"
    Height="350px"
    Dense="true"
    Loading="_loading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Companies</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="company => company.Symbol" Title="Symbol" />
        <PropertyColumn Property="company => company.Name" Title="Name" />
        @* <PropertyColumn Property="company => company.Exchange" Title="Exchange Short Name" /> *@
    </Columns>
</MudDataGrid>

@code {
    private CancellationTokenSource _cancellationTokenSource = new();
    private MudDataGrid<Company> _dataGrid = null!;
    private string _searchString = string.Empty;
    private List<Company> _companies = [];
    private bool _loading = true;

    private bool GlobalSearch(Company company)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (company.Symbol.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (company.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // if (company.Exchange.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;

        return false;
    }

    private string SelectedRowClassFunc(Company company, int _) =>
        _dataGrid.SelectedItem == company ? "selected" : string.Empty;

    protected override async Task OnParametersSetAsync() 
    {
        _loading = true;

        _companies = [];

        _companies = await SelectableCompaniesFactory.Invoke(_cancellationTokenSource.Token);

        _loading = false;

        await base.OnParametersSetAsync();
    }

    [Parameter]
    [EditorRequired]
    public Func<CancellationToken, Task<List<Company>>> SelectableCompaniesFactory { get; set; } =
        _ => Task.FromResult(new List<Company>());

    [Parameter]
    [EditorRequired]
    public EventCallback<Company> OnCompanySelect { get; set; }

    public async ValueTask DisposeAsync() 
    {
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose(); 
    }
}
