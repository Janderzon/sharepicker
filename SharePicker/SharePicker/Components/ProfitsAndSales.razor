@using ApexCharts
@using SharePicker.Models
@implements IAsyncDisposable

@if (_profitSeries != null && _salesSeries != null)
{
    <ApexChart Options="_chartOptions">
        <ApexPointSeries 
            Items="_salesSeries"
            Name="Sales"
            XValue="@(x => x.Label)"
            YValue="@(x => x.Value)"
            SeriesType="SeriesType.Bar" />

        <ApexPointSeries 
            Items="_profitSeries"
            Name="Profit"
            XValue="@(x => x.Label)"
            YValue="@(x => x.Value)"
            SeriesType="SeriesType.Bar" />
    </ApexChart>
}
else
{
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Style="padding-top: 61.8%" />
}

@code {
    private CancellationTokenSource _cancellationTokenSource = new();
    private List<LabeledValue>? _salesSeries;
    private List<LabeledValue>? _profitSeries;
    private ApexChartOptions<LabeledValue> _chartOptions = new()
    {
        Chart = new Chart
        {
            Toolbar = new Toolbar { Show = false }
        },
        Theme = new Theme { Mode = Mode.Dark },
        Yaxis =
        [
            new YAxis
            {
                Title = new AxisTitle { Text = "Money" }
            }
        ]
    };

    [Parameter]
    [EditorRequired]
    public Func<CancellationToken, Task<List<LabeledValue>>> SalesSeriesFactory { get; set; } =
        _ => Task.FromResult(new List<LabeledValue>());

    [Parameter]
    [EditorRequired]
    public Func<CancellationToken, Task<List<LabeledValue>>> ProfitSeriesFactory { get; set; } =
        _ => Task.FromResult(new List<LabeledValue>());

    protected override async Task OnParametersSetAsync()
    {
        _salesSeries = null;
        _profitSeries = null;

        _salesSeries = await SalesSeriesFactory.Invoke(_cancellationTokenSource.Token);
        _profitSeries = await ProfitSeriesFactory.Invoke(_cancellationTokenSource.Token);

        await base.OnParametersSetAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
    }
}
